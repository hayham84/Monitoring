import json
import sqlite3
import pygal
import smtplib
from email.mime.text import MIMEText
from datetime import datetime

db = "../partie2/database.db"


def argument(filename):

    try:
        with open(filename, "r", encoding="utf-8") as f:
            config = json.load(f)
        return config
    except Exception as e:
        print("Erreur lors du chargement du fichier de configuration:", e)
        return None


def generate_graph(sonde, fichier_de_sortie):

    # Vérification du nom de la sonde
    sondes_existant = ["cpu_usage", "ram_usage", "disk_usage"]
    if sonde not in sondes_existant:
        print(f"Erreur : sonde '{sonde}' non reconnue. Choisir parmi {sondes_existant}.")
        return None

    conn = sqlite3.connect(db)
    cursor = conn.cursor()
    query = f"SELECT timestamp, {sonde} FROM info_systeme ORDER BY timestamp"
    cursor.execute(query)
    data = cursor.fetchall()
    conn.close()

    timestamps = []
    values = []
    for row in data:
        timestamp_str, value = row
        timestamp_dt = datetime.strptime(timestamp_str, '%Y-%m-%d %H:%M:%S')
        timestamps.append(timestamp_dt.strftime("%H:%M:%S"))
        values.append(value)

    graphe = pygal.Line(x_label_rotation=40)
    graphe.title = f"Historique pour {sonde}"
    graphe.x_labels = timestamps
    graphe.add(sonde, values)

    graphe.render_to_file(fichier_de_sortie) 
    print(f"Graphique généré :")
    return True

def detecte_crise(sonde, seuil):

    conn = sqlite3.connect(db)
    cursor = conn.cursor()
    query = f"SELECT {sonde} FROM info_systeme ORDER BY timestamp DESC LIMIT 1"
    cursor.execute(query)
    result = cursor.fetchone()
    conn.close()
    print(result[0])

    last_value = result[0]
    if last_value > seuil:
        print(f"Situation de crise détectée pour {sonde} : valeur {last_value} > seuil {seuil}")
        return last_value,True
    else :
        return last_value, False

 destinataire = ["haytham.berhili@alumni.univ-avignon.fr"]  # Liste des destinataires 
        sujet = f"Alerte Crise : {sonde} dépasse {seuil}%"

        send_alert_email(sujet, email, destinataire)

    else:
        print("Aucune situation de crise détectée, aucun e-mail n'a été envoyé.")

if __name__ == "__main__":
    main()
